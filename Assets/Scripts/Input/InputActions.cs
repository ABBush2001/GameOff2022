//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Input/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""ExplainMenu"",
            ""id"": ""497b3b91-9958-4f1b-8f28-ccbdca5b1e3a"",
            ""actions"": [
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""45e8934d-3803-4ce5-90a1-d5d4a887357c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Submit"",
                    ""type"": ""Button"",
                    ""id"": ""284a1f50-3481-410d-9d14-6cd46ea9c591"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1f43dbd5-6c4d-4542-baa7-5aebc9f9a678"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bf11498b-a0a0-4d47-b115-c9ea09f700b2"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Submit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // ExplainMenu
        m_ExplainMenu = asset.FindActionMap("ExplainMenu", throwIfNotFound: true);
        m_ExplainMenu_Interact = m_ExplainMenu.FindAction("Interact", throwIfNotFound: true);
        m_ExplainMenu_Submit = m_ExplainMenu.FindAction("Submit", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ExplainMenu
    private readonly InputActionMap m_ExplainMenu;
    private IExplainMenuActions m_ExplainMenuActionsCallbackInterface;
    private readonly InputAction m_ExplainMenu_Interact;
    private readonly InputAction m_ExplainMenu_Submit;
    public struct ExplainMenuActions
    {
        private @InputActions m_Wrapper;
        public ExplainMenuActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Interact => m_Wrapper.m_ExplainMenu_Interact;
        public InputAction @Submit => m_Wrapper.m_ExplainMenu_Submit;
        public InputActionMap Get() { return m_Wrapper.m_ExplainMenu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ExplainMenuActions set) { return set.Get(); }
        public void SetCallbacks(IExplainMenuActions instance)
        {
            if (m_Wrapper.m_ExplainMenuActionsCallbackInterface != null)
            {
                @Interact.started -= m_Wrapper.m_ExplainMenuActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_ExplainMenuActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_ExplainMenuActionsCallbackInterface.OnInteract;
                @Submit.started -= m_Wrapper.m_ExplainMenuActionsCallbackInterface.OnSubmit;
                @Submit.performed -= m_Wrapper.m_ExplainMenuActionsCallbackInterface.OnSubmit;
                @Submit.canceled -= m_Wrapper.m_ExplainMenuActionsCallbackInterface.OnSubmit;
            }
            m_Wrapper.m_ExplainMenuActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @Submit.started += instance.OnSubmit;
                @Submit.performed += instance.OnSubmit;
                @Submit.canceled += instance.OnSubmit;
            }
        }
    }
    public ExplainMenuActions @ExplainMenu => new ExplainMenuActions(this);
    public interface IExplainMenuActions
    {
        void OnInteract(InputAction.CallbackContext context);
        void OnSubmit(InputAction.CallbackContext context);
    }
}
